% function [output1,output2] = intvaltimes(input1,input2,input3,varargin)
% %INTVALTIMES - One line description of what the function or script performs (H1 line)
% %
% %   Syntax:
% %       output = INTVALTIMES(input1, input2)
% %       output = INTVALTIMES(input1, input2, input3)
% %
% %   Description:
% %       INTVALTIMES() - description
% %
% %   Inputs:
% %       input1 - Description
% %       input2 - Description
% %       input3 - Description
% %
% %   Outputs:
% %       output1 - Description
% %       output2 - Description
% %
% %   Subfunctions: none
% %   Classes required: none
% %   Other m-files required: none
% %   MAT-files required: none
% %
% %   Author: Shane Kepley
% %   email: shane.kepley@rutgers.edu
% %   Date: 25-Jul-2018; Last revision: 25-Jul-2018
%
% %%
% % parse input and varargin
% p = inputParser;
% addRequired(p,input1)
% addRequired(p,input2)
% addRequired(p,input3)
% addParameter(p,'Parameter1',default1)
% addParameter(p,'Parameter2',default2)
% addParameter(p,'Parameter3',default3)
%
% parse(p,input1,input2,input3,varargin{:})
% parameter1 = p.Results.Parameter1;
% parameter2 = p.Results.Parameter2;
% parameter3 = p.Results.Parameter3;

a = reshape(1:6,3,2)';
b = -reshape(1:6,2,3)';
[T,S] = meshgrid(0:size(a,1)-1,0:size(a,2)-1);
pe = [reshape(S,[],1), reshape(T,[],1)];
[T,S] = meshgrid(0:size(b,1)-1,0:size(b,2)-1);
qe = [reshape(S,[],1), reshape(T,[],1)];


pc = reshape(a',[],1);
qc = reshape(b',[],1);


% result p*q multivariate
np = length(pc);                     % number of terms in p
nq = length(qc);                     % number of terms in q
dim = 2;                    % number of variables

clear r
pe = repmat(pe,[1 1 nq]);
qe = shiftdim(repmat(qe',[1 1 np]),2);
r.e = reshape(shiftdim(pe + qe,2) , np*nq , dim );
r.c = reshape( qc * pc.' , np*nq , 1 );


% omit zero coefficients
if size(r.e,2)>1                % multivariate case
    [r.e,r.c] = collect(r.e,r.c);
    index = ( r.c ~= 0 );
    if ~any(index)                % zero polynomial
        r.e = zeros(1,size(r.e,2));
        r.c = typeadj( 0 ,typeof(r.c) );
        return
    elseif ~all(index)
        r.e = r.e(index,:);
        r.c = r.c(index);
    end
else                            % univariate case
    index = ( r.c==0 );
    if all(index)                 % zero polynomial
        r.e = zeros(1,size(r.e,2));
        r.c = typeadj( 0 , typeof(r.c) );
        return
    end
    [m,i] = min(index);           % first nonzero coefficient in r.c(i)
    if i~=1                       % omit leading zeros
        r.e = r.e-i+1;
        r.c(1:i-1) = [];
    end
end



% COLLECT
 emax = max(r.e,[],1)+1; 
%   index = exp2index(r.e,emax)+1;
  
  
  
   m = size(r.e,1);
  n = length(emax);
  index = sum( r.e .* [ ones(m,1) cumprod(ones(m,1)*emax(1:n-1),2) ] , 2 ); 
  
  
  
  
  if any(index>=2^31)           % maximum index for sparse matrices
    indexc_0 = ( c==0 ); 
    if any(indexc_0)
      e(indexc_0,:) = [];
    end
    [e,sortindex] = sortrows(e);
    esortdiff = diff(e,1,1);    
    indexe = logical([1;any(esortdiff,2)]);
    index = cumsum(indexe,1);
    if isa(c,'intval')      
      if any(indexc_0)d
        c = intval(c.inf(~indexc_0),c.sup(~indexc_0),'infsup');
      end
      c = intval(c.inf(sortindex),c.sup(sortindex),'infsup');
      i = find( sparse( index , 1 , c~=0 ) );
      setround(-1)
      cinf = sparse( index , 1 , c.inf );
      setround(1)
      csup = sparse( index , 1 , c.sup );
      c = infsup(full(cinf(i)),full(csup(i)));
    else      
      if any(indexc_0)
        c(indexc_0) = [];
      end
      c = c(sortindex);
      [i,j,c] = find( sparse( index , 1 , c ) );      
      if isempty(c)            % zero polynomial
        e = zeros(1,length(emax));
        c = 0;
        setround(rndold)
        return
      end      
    end
    index = 1:size(e,1);
    e = e(index(indexe),:);
  else
    if isa(c,'intval')
      i = find( sparse( index , 1 , double(c~=0) ) );
      setround(-1)
      cinf = sparse( index , 1 , c.inf );
      setround(1)
      csup = sparse( index , 1 , c.sup );
      c = infsup(full(cinf(i)),full(csup(i)));
    else
      [i,j,c] = find( sparse( index , 1 , c ) );
      if isempty(c)            % zero polynomial
        e = zeros(1,length(emax)); 
        c = 0;
        setround(rndold)
        return
      end
    end
    e = index2exp(i-1,emax); 
  end


% end % end intvaltimes

